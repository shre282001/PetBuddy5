import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class MyPet {
  final String id;
  final String name;
  final String profilePic;

  MyPet({
    required this.id,
    required this.name,
    required this.profilePic,
  });
}

class MyPetListView extends StatefulWidget {
  @override
  _MyPetListViewState createState() => _MyPetListViewState();
}

class _MyPetListViewState extends State<MyPetListView> {
  final List<MyPet> myPets = [
    MyPet(id: '1', name: 'Buddy', profilePic: 'buddy.jpg'),
    MyPet(id: '2', name: 'Luna', profilePic: 'luna.jpg'),
    MyPet(id: '3', name: 'Charlie', profilePic: 'charlie.jpg'),
    // Add more MyPet items here
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView.builder(
        itemCount: myPets.length,
        itemBuilder: (context, index) {
          return MyPetCard(
            myPet: myPets[index],
            onDelete: () {
              setState(() {
                // Delete the pet locally
                myPets.removeAt(index);
              });
            },
          );
        },
      ),
    );
  }
}

class MyPetCard extends StatelessWidget {
  final MyPet myPet;
  final VoidCallback onDelete;

  const MyPetCard({
    required this.myPet,
    required this.onDelete,
  });

  Future<void> deletePetFromFirebase(String id) async {
    await FirebaseFirestore.instance.collection('Pets').doc(id).delete();
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.all(10),
      child: ListTile(
        contentPadding: EdgeInsets.all(16),
        leading: CircleAvatar(
          backgroundImage: NetworkImage(myPet.profilePic),
          radius: 25,
        ),
        title: Text(myPet.name),
        trailing: PopupMenuButton<String>(
          icon: Icon(Icons.more_vert),
          itemBuilder: (context) => [
            PopupMenuItem<String>(
              value: 'edit',
              // ... Other menu items remain the same
            ),
            PopupMenuItem<String>(
              value: 'delete',
              child: Row(
                children: [
                  Icon(Icons.delete),
                  SizedBox(width: 8),
                  Text('Delete'),
                ],
              ),
            ),
          ],
          onSelected: (value) {
            if (value == 'edit') {
              // Navigate to edit details page
              // Pass myPet object or its id to the next page for editing
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EditPetPage(myPet: myPet),
                ),
              );
            } else if (value == 'delete') {
              deletePetFromFirebase(myPet.id); // Delete pet from Firebase
              onDelete(); // Delete pet locally
            }
          },
        ),
      ),
    );
  }
}

class EditPetPage extends StatefulWidget {
  final MyPet myPet;

  const EditPetPage({required this.myPet});

  @override
  _EditPetPageState createState() => _EditPetPageState();
}

class _EditPetPageState extends State<EditPetPage> {
  late TextEditingController nameController;

  @override
  void initState() {
    super.initState();
    nameController = TextEditingController(text: widget.myPet.name);
  }

  @override
  void dispose() {
    nameController.dispose();
    super.dispose();
  }

  Future<void> updatePetDetails() async {
    await FirebaseFirestore.instance
        .collection('Pets')
        .doc(widget.myPet.id)
        .update({
      'name': nameController.text,
      // Update other fields similarly
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Changes Saved Successfully'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Edit Pet'),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(50),
                  bottomRight: Radius.circular(50),
                ),
              ),
              padding: EdgeInsets.all(16.0),
              child: Column(
                children: [
                  SizedBox(height: 16.0),
                  TextFormField(
                    controller: nameController,
                    decoration: InputDecoration(
                      labelText: 'Pet Name',
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: updatePetDetails,
              child: Text('Save Changes'),
              style: ElevatedButton.styleFrom(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20.0),
                ),
              ),
            ),
            Divider(
              color: Colors.grey,
              thickness: 2.0,
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: MyPetListView(),
  ));
}
